Microsoft (R) Macro Assembler Version 14.26.28806.0	    06/17/20 16:23:58
9Programming Assignment #6   (RohitChaudhary_Project6.asm    Page 1 - 1


				TITLE Programming Assignment #6   (RohitChaudhary_Project6.asm)

				; Author: Rohit Chaudhary
				; Last Modified: 6/7/2020
				; OSU email address: chaudroh@oregonstate.edu
				; Course number/section: CS 271/400
				; Project Number: 6               Due Date: 6/7/2020
				; Description: Test program demonstrating ReadVal and WriteVal procedures. 
				;	Program prompts user to input 10 integers that will be stored in 
				;	an array, and then calculates the sum and average of the inputted vals. 
				;	ReadVal procedure implements the macro getString (macro prompts and gets 
				;	keyboard string input) and converts the numeric string in to the
				;	corresponding integer value while validating for sign and size. WriteVal
				;	procedure implements the macro displayString (macro prints string stored
				;	at specific memory location) and converts a numeric value into a string of
				;	digits that are then printed as a comma-separated list. The sum and average
				;	are printed after the list in similar fashion.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 =-80000000			MINVAL = -2147483648			; min possible 32bit value
 = 7FFFFFFF			MAXVAL = 2147483647				; max possible 32bit value
 = 0000000A			ARRAYSIZE = 10					; size of array containing integers

				;---------------------------------------
				mDisplayString MACRO buffer:req
				;
				; displays contents of buffer to user by printing buffer to console.
				;
				; preconditions: buffer is an OFFSET to the string in memory.
				;
				; postconditions: buffer is printed for user
				;
				; receives:
				;		buffer = address of string to be printed
				;
				; returns: none
				;---------------------------------------
					; print the string
					push	edx
					mov		edx, buffer
					call	WriteString
					pop		edx
				ENDM
				;---------------------------------------
				mGetString MACRO prompt:req, varName:req, varLen:req, input_len:req
				;
				; displays prompt for user via mdisplayString. Subsequently reads user input
				;	with ReadString (and its required parameters, varName and varLen), storing
				;	input at memory address of varName. Resulting length of user's string input
				;	stored at memory location input_len.
				;
				; preconditions: addresses of prompt, varName, varLen, input_len are declared
				;	and passed a required arguments.
				;
				; postconditions: prompt printed. eax contains user input length by ReadString
				;
				; receives:
				;		prompt = OFFSET address of user prompt to be printed
				;		varName = OFFSET address ReadString user input array
				;		varLen = length of varLen as used by ReadString
				;		input_len = OFFSET address of length of user ReadString input
				;
				; returns: varName and input_len updated
				;---------------------------------------
					push	ecx
					push	edx
					push	edi
					
					; display prompt for user input
					mDisplayString prompt

					; read using ReadString
					mov		edi, input_len
					mov		edx, varName
					mov		ecx, varLen - 1
					call	ReadString
					mov		[edi], eax

					pop		edi
					pop		edx
					pop		ecx
				ENDM

 00000000			.data
 00000000 50 52 4F 47 52	title_str			BYTE		"PROGRAMMING ASSIGNMENT #6: Designing Low-Level "
	   41 4D 4D 49 4E
	   47 20 41 53 53
	   49 47 4E 4D 45
	   4E 54 20 23 36
	   3A 20 44 65 73
	   69 67 6E 69 6E
	   67 20 4C 6F 77
	   2D 4C 65 76 65
	   6C 20
 0000002F  49 2F 4F 20 70						BYTE		"I/O procedures",10,13,0
	   72 6F 63 65 64
	   75 72 65 73 0A
	   0D 00
 00000040 57 72 69 74 74	author_str			BYTE		"Written By: Rohit Chaudhary",10,13,10,13,0
	   65 6E 20 42 79
	   3A 20 52 6F 68
	   69 74 20 43 68
	   61 75 64 68 61
	   72 79 0A 0D 0A
	   0D 00
 00000060 50 6C 65 61 73	intro_str			BYTE		"Please provide 10 signed decmial integers.",10,13
	   65 20 70 72 6F
	   76 69 64 65 20
	   31 30 20 73 69
	   67 6E 65 64 20
	   64 65 63 6D 69
	   61 6C 20 69 6E
	   74 65 67 65 72
	   73 2E 0A 0D
 0000008C  45 61 63 68 20						BYTE		"Each number needs to be small enough to "
	   6E 75 6D 62 65
	   72 20 6E 65 65
	   64 73 20 74 6F
	   20 62 65 20 73
	   6D 61 6C 6C 20
	   65 6E 6F 75 67
	   68 20 74 6F 20
 000000B4  66 69 74 20 69						BYTE		"fit inside a 32-bit register.",10,13
	   6E 73 69 64 65
	   20 61 20 33 32
	   2D 62 69 74 20
	   72 65 67 69 73
	   74 65 72 2E 0A
	   0D
 000000D3  41 66 74 65 72						BYTE		"After you have finished inputting the raw numbers "
	   20 79 6F 75 20
	   68 61 76 65 20
	   66 69 6E 69 73
	   68 65 64 20 69
	   6E 70 75 74 74
	   69 6E 67 20 74
	   68 65 20 72 61
	   77 20 6E 75 6D
	   62 65 72 73 20
 00000105  49 20 77 69 6C						BYTE		"I will display a list",10,13
	   6C 20 64 69 73
	   70 6C 61 79 20
	   61 20 6C 69 73
	   74 0A 0D
 0000011C  6F 66 20 74 68						BYTE		"of the integers, their sum"
	   65 20 69 6E 74
	   65 67 65 72 73
	   2C 20 74 68 65
	   69 72 20 73 75
	   6D
 00000136  2C 20 61 6E 64						BYTE		", and their average value.",10,13,10,13,0
	   20 74 68 65 69
	   72 20 61 76 65
	   72 61 67 65 20
	   76 61 6C 75 65
	   2E 0A 0D 0A 0D
	   00
 00000155 50 6C 65 61 73	prompt_str			BYTE		"Please enter a signed number: ",0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 6E 75 6D
	   62 65 72 3A 20
	   00
 00000174  0000000C [		user_input_str		BYTE		12 DUP (0)
	    00
	   ]
 00000180 0000000C		max_len_input		DWORD		SIZEOF user_input_str
 00000184 00000000		actual_len_input	DWORD		?
 00000188 00000000		user_val			SDWORD		?
 0000018C 00000000		user_val_sign		SDWORD		?
 00000190  0000000A [		array_nums			SDWORD		ARRAYSIZE DUP (0)
	    00000000
	   ]
 000001B8 45 52 52 4F 52	error_str			BYTE		"ERROR: You did not enter a signed number or your "
	   3A 20 59 6F 75
	   20 64 69 64 20
	   6E 6F 74 20 65
	   6E 74 65 72 20
	   61 20 73 69 67
	   6E 65 64 20 6E
	   75 6D 62 65 72
	   20 6F 72 20 79
	   6F 75 72 20
 000001E9  6E 75 6D 62 65						BYTE		"number was too big.",10,13,0
	   72 20 77 61 73
	   20 74 6F 6F 20
	   62 69 67 2E 0A
	   0D 00
 000001FF  0000000C [		user_output_str		BYTE		12 DUP (0)
	    00
	   ]
 0000020B 0000000C		max_len_output		DWORD		SIZEOF user_output_str
 0000020F 00000000		current_array_num	SDWORD		?
 00000213 0A 0D 59 6F 75	array_str			BYTE		10,13,"You entered the following numbers: ",10,13,0
	   20 65 6E 74 65
	   72 65 64 20 74
	   68 65 20 66 6F
	   6C 6C 6F 77 69
	   6E 67 20 6E 75
	   6D 62 65 72 73
	   3A 20 0A 0D 00
 0000023B 2C 20 00		comma				BYTE		", ",0
 0000023E 0A 0D 54 68 65	sum_str				BYTE		10,13,"The sum of these numbers is: ",0
	   20 73 75 6D 20
	   6F 66 20 74 68
	   65 73 65 20 6E
	   75 6D 62 65 72
	   73 20 69 73 3A
	   20 00
 0000025E 0A 0D 54 68 65	average_str			BYTE		10,13,"The rounded average is: ",0
	   20 72 6F 75 6E
	   64 65 64 20 61
	   76 65 72 61 67
	   65 20 69 73 3A
	   20 00
 00000279 00000000		sum					SDWORD		?
 0000027D 00000000		average				SDWORD		?
 00000281 0A 0D 0A 0D 54	goodbye_str			BYTE		10,13,10,13,"Thanks for playing!",10,13,0
	   68 61 6E 6B 73
	   20 66 6F 72 20
	   70 6C 61 79 69
	   6E 67 21 0A 0D
	   00


 00000000			.code
 00000000			main PROC
					; display title, author, and instructions
 00000000  68 00000000 R		push	OFFSET title_str
 00000005  68 00000040 R		push	OFFSET author_str
 0000000A  68 00000060 R		push	OFFSET intro_str
 0000000F  E8 0000009C			call	introduction
					
					; get 10 integers from user into array
 00000014  68 0000018C R		push	OFFSET user_val_sign
 00000019  68 00000184 R		push	OFFSET actual_len_input
 0000001E  68 00000190 R		push	OFFSET array_nums
 00000023  6A 0A			push	ARRAYSIZE
 00000025  68 000001B8 R		push	OFFSET error_str
 0000002A  68 00000155 R		push	OFFSET prompt_str
 0000002F  68 00000174 R		push	OFFSET user_input_str
 00000034  FF 35 00000180 R		push	max_len_input
 0000003A  68 00000188 R		push	OFFSET user_val
 0000003F  68 80000000			push	MINVAL
 00000044  68 7FFFFFFF			push	MAXVAL
 00000049  E8 00000087			call	fillArray

					; print the 10 integers
 0000004E  68 0000023B R		push	OFFSET comma
 00000053  68 0000020F R		push	OFFSET current_array_num
 00000058  68 00000190 R		push	OFFSET array_nums
 0000005D  6A 0A			push	ARRAYSIZE
 0000005F  68 00000213 R		push	OFFSET array_str
 00000064  68 000001FF R		push	OFFSET user_output_str
 00000069  FF 35 0000020B R		push	max_len_output
 0000006F  E8 000001D2			call	displayArray

					; calculate and print the sum and average of 10 ints
 00000074  68 000001FF R		push	OFFSET user_output_str
 00000079  FF 35 0000020B R		push	max_len_output
 0000007F  68 00000279 R		push	OFFSET sum
 00000084  68 0000027D R		push	OFFSET average
 00000089  68 00000190 R		push	OFFSET array_nums
 0000008E  6A 0A			push	ARRAYSIZE
 00000090  68 0000023E R		push	OFFSET sum_str
 00000095  68 0000025E R		push	OFFSET average_str
 0000009A  E8 00000261			call	displayStats

					; say goodbye to user
 0000009F  68 00000281 R		push	OFFSET goodbye_str
 000000A4  E8 000002B4			call	farewell

					exit	; exit to operating system
 000000A9  6A 00	   *	    push   +000000000h
 000000AB  E8 00000000 E   *	    call   ExitProcess
 000000B0			main ENDP

				;---------------------------------------
 000000B0			introduction proc
				;
				; displays program title, information, and user instructions by printing to
				;	console via macro mdisplayString
				;
				; preconditions: strings containing title, author, and instructions are 
				;	prepared.
				; 
				; postconditions: relevant strings are printed to console
				;
				; receives: 
				;			[ebp+16]	@title_str
				;			[ebp+12]	@author_str
				;			[ebp+8]		@intro_str
				;
				; returns: none
				;---------------------------------------
					; set up the stack frame
 000000B0  55				push	ebp
 000000B1  8B EC			mov		ebp, esp

					; print title, author, instructions
					mDisplayString	[ebp+16]
 000000B3  52		     1		push	edx
 000000B4  8B 55 10	     1		mov		edx, [ebp+16]
 000000B7  E8 00000000 E     1		call	WriteString
 000000BC  5A		     1		pop		edx
					mDisplayString	[ebp+12]
 000000BD  52		     1		push	edx
 000000BE  8B 55 0C	     1		mov		edx, [ebp+12]
 000000C1  E8 00000000 E     1		call	WriteString
 000000C6  5A		     1		pop		edx
					mDisplayString	[ebp+8]
 000000C7  52		     1		push	edx
 000000C8  8B 55 08	     1		mov		edx, [ebp+8]
 000000CB  E8 00000000 E     1		call	WriteString
 000000D0  5A		     1		pop		edx

					; clear the stack
 000000D1  5D				pop		ebp
 000000D2  C2 000C			ret		12
 000000D5			introduction ENDP
				;---------------------------------------
 000000D5			fillArray proc
				;
				; fills array with ARRAYSIZE amount of nums, utilizing ReadVal to retrieve user
				;	input.
				;
				; preconditions: array of ARRAYSIZE is declared, preconditions for ReadVal are
				;	met. changes registers eax, ecx, edi, edi.
				; 
				; postconditions: user_val is updated with most recent user inputted integer
				;
				; receives: 
				;			[ebp+48]	@val_sign = sign of user's input value
				;			[ebp+44]	@user_len_input = length of user's input in bytes
				;			[ebp+40]	@array = array to hold user inputted integers
				;			[ebp+36]	ARRAYSIZE = size of array
				;			[ebp+32]	@error_str	= error msg to display
				;			[ebp+28]	@prompt_str = string asking user to input a value
				;			[ebp+24]	@user_input_str = string array to receive user input
				;			[ebp+20]	max_len_input = size of user_input_str
				;			[ebp+16]	@user_val = variable to be updated with converted num
				;			[ebp+12]	MINVAL = minimum acceptable input value
				;			[ebp+8]		MAXVAL = maximum acceptable input value
				;
				; returns: updated array
				;---------------------------------------
					; set up the stack frame
 000000D5  55				push		ebp
 000000D6  8B EC			mov		ebp, esp

					; prepare loop
 000000D8  8B 7D 28			mov		edi, [ebp+40]			; array
 000000DB  8B 75 10			mov		esi, [ebp+16]			; current inputted int
 000000DE  8B 4D 24			mov		ecx, [ebp+36]			; ARRAYSIZE

 000000E1			Fill:
					; save relevant values before ReadVal
 000000E1  51				push	ecx
 000000E2  57				push	edi
 000000E3  56				push	esi

					; prepare arguments for ReadVal
 000000E4  FF 75 30			push	[ebp+48]				; OFFSET user_val_sign
 000000E7  FF 75 2C			push	[ebp+44]				; OFFSET actual_len_input
 000000EA  FF 75 20			push	[ebp+32]				; OFFSET error_str
 000000ED  FF 75 1C			push	[ebp+28]				; OFFSET prompt_str
 000000F0  FF 75 18			push	[ebp+24]				; OFFSET user_input_str
 000000F3  FF 75 14			push	[ebp+20]				; max_len_input
 000000F6  FF 75 10			push	[ebp+16]				; OFFSET user_val
 000000F9  FF 75 0C			push	[ebp+12]				; MINVAL
 000000FC  FF 75 08			push	[ebp+8]					; MAXVAL
 000000FF  E8 00000010			call	ReadVal

					; restore values
 00000104  5E				pop		esi
 00000105  5F				pop		edi
 00000106  59				pop		ecx

					; add the new integer to array
 00000107  8B 06			mov		eax, [esi]
 00000109  89 07			mov		[edi], eax
 0000010B  83 C7 04			add		edi, 4

					; next num
 0000010E  E2 D1			loop	Fill

					; clear the stack
 00000110  5D				pop		ebp
 00000111  C2 002C			ret		44
 00000114			fillArray ENDP
				;---------------------------------------
 00000114			ReadVal proc
				;
				; gets string integer input from user via macro mGetString. calls validation procedures
				;	for sign and integer input. the converts inputted string in to numeric 
				;	signed integers, validated for size (MINVAL <= input <= MAXVAL). conversion
				;	of string input to integer per string processing techniques demostrated by 
				;	Professor Paulson in Lecture #22.
				;
				; preconditions: variables for sign, input length, string array, user_val 
				;	declared to implement validation and retrieving input. prompt and error
				;	strings declared for prompting user to input and when input is erroneous.
				;
				; postconditions: changes registers eax, ebx, ecx, edx, edi, esi
				;
				; receives:
				;			[ebp+40]	@user_val_sign = sign (1/-1) of user's input value
				;			[ebp+36]	@actual_len_input = length (bytes) of user input string
				;			[ebp+32]	@error_str	= error msg to display
				;			[ebp+28]	@prompt_str = string asking user to input a value
				;			[ebp+24]	@user_input_str = string array to receive user input
				;			[ebp+20]	max_len_input = size of user_input_str
				;			[ebp+16]	@user_val = variable to be updated with converted num
				;			[ebp+12]	MINVAL = minimum acceptable input value
				;			[ebp+8]		MAXVAL = maximum acceptable input value
				;			[ebp-4]		local x = holds intermediate conversions
				;			[ebp-8]		local temp = holds local ascii_val
				;
				; returns: user_val updated with converted signed int. user_val_sign updated
				;	with sign of user input. error_str displayed if validation failed. 
				;---------------------------------------
					; set up the stack frame
 00000114  55				push	ebp
 00000115  8B EC			mov		ebp, esp
 00000117  83 EC 08			sub		esp, 8					; local vars

 0000011A			GetNumber:
					; get user num
					mGetString	[ebp+28], [ebp+24], [ebp+20], [ebp+36]
 0000011A  51		     1		push	ecx
 0000011B  52		     1		push	edx
 0000011C  57		     1		push	edi
 0000011D  52		     2		push	edx
 0000011E  8B 55 1C	     2		mov		edx, [ebp+28]
 00000121  E8 00000000 E     2		call	WriteString
 00000126  5A		     2		pop		edx
 00000127  8B 7D 24	     1		mov		edi, [ebp+36]
 0000012A  8B 55 18	     1		mov		edx, [ebp+24]
 0000012D  8B 4D 13	     1		mov		ecx, [ebp+20] - 1
 00000130  E8 00000000 E     1		call	ReadString
 00000135  89 07	     1		mov		[edi], eax
 00000137  5F		     1		pop		edi
 00000138  5A		     1		pop		edx
 00000139  59		     1		pop		ecx

					; convert input str -> int
 0000013A  FC				cld
 0000013B  8B 7D 24			mov		edi, [ebp+36]
 0000013E  8B 0F			mov		ecx, [edi]				; loop counter = length of user input
 00000140  8B 75 18			mov		esi, [ebp+24]			; user input is going to be accessed
 00000143  C7 45 FC			mov		DWORD PTR [ebp-4], 0	; initialize local x
	   00000000
 0000014A  BA 00000001			mov		edx, 1			
					
					; get the sign of user's integer
 0000014F  57				push	edi
 00000150  8B 7D 28			mov		edi, [ebp+40]
 00000153  89 17			mov		[edi], edx
 00000155  5F				pop		edi
 00000156  52				push	edx						; determines sign of final integer

 00000157			IterateInput:
 00000157  B8 00000000			mov		eax, 0					; clear register for next num
 0000015C  AC				lodsb							

					; check to see if leading -/+ sign given
 0000015D  BB 0000002D			mov		ebx, 45					; ASCII - = 45
 00000162  3B C3			cmp		eax, ebx
 00000164  74 0B			je		NegativeNum
 00000166  BB 0000002B			mov		ebx, 43					; ASCII + = 43
 0000016B  3B C3			cmp		eax, ebx
 0000016D  74 3B			je		NextNum
 0000016F  EB 0F			jmp		Check					; not negative sign, move on

 00000171			NegativeNum:
					; update sign to reflect negative input
 00000171  BA FFFFFFFF			mov		edx, -1
 00000176  57				push	edi
 00000177  8B 7D 28			mov		edi, [ebp+40]
 0000017A  89 17			mov		[edi], edx
 0000017C  5F				pop		edi
 0000017D  52				push	edx
 0000017E  EB 2A			jmp		NextNum

 00000180			Check:
					; validate that ascii between 48-57
 00000180  89 45 F8			mov		DWORD PTR [ebp-8], eax
 00000183  50				push	eax
 00000184  E8 0000005B			call	validateASCII
 00000189  74 44			jz		Error
 0000018B  8B 45 F8			mov		eax, DWORD PTR [ebp-8]

 0000018E			Conversion:
					; conversion str -> int: x = 10 * x + (user_input[i] - 48)
 0000018E  BB 00000030			mov		ebx, 48
 00000193  2B C3			sub		eax, ebx
 00000195  50				push	eax
 00000196  8B 45 FC			mov		eax, DWORD PTR [ebp-4]
 00000199  BB 0000000A			mov		ebx, 10
 0000019E  F7 E3			mul		ebx
 000001A0  89 45 FC			mov		DWORD PTR [ebp-4], eax
 000001A3  58				pop		eax
 000001A4  03 45 FC			add		eax, DWORD PTR [ebp-4]
 000001A7  89 45 FC			mov		DWORD PTR [ebp-4], eax

 000001AA			NextNum:
 000001AA  E2 AB			loop	IterateInput

 000001AC			UpdateVal:
					; done, move converted result to user_val
 000001AC  8B 7D 10			mov		edi, [ebp+16]
 000001AF  89 07			mov		[edi], eax

					; validate the int to be within range
 000001B1  FF 75 28			push	[ebp+40]
 000001B4  FF 75 10			push	[ebp+16]
 000001B7  FF 75 0C			push	[ebp+12]
 000001BA  FF 75 08			push	[ebp+8]
 000001BD  E8 00000048			call	ValidateInt
 000001C2  74 0B			jz		Error

					; restore approriate sign of integer
 000001C4  5A				pop		edx
 000001C5  8B 07			mov		eax, [edi]
 000001C7  8B DA			mov		ebx, edx
 000001C9  F7 EB			imul	ebx
 000001CB  89 07			mov		[edi], eax

					; conversion and validation complete
 000001CD  EB 0F			jmp		DoneConverting

 000001CF			Error:
					mDisplayString [ebp+32]
 000001CF  52		     1		push	edx
 000001D0  8B 55 20	     1		mov		edx, [ebp+32]
 000001D3  E8 00000000 E     1		call	WriteString
 000001D8  5A		     1		pop		edx
 000001D9  E9 FFFFFF3C			jmp		GetNumber					; get a new num from user

 000001DE			DoneConverting:
					; clear the stack
 000001DE  8B E5			mov		esp, ebp
 000001E0  5D				pop		ebp
 000001E1  C2 0024			ret		36
 000001E4			ReadVal ENDP
				;---------------------------------------
 000001E4			validateASCII proc
				;
				; Takes ascii value and determines whether value is a digit, meaning between
				;	ASCII values 48 - 57. sets ZF if not a digit, clears ZF it is a digit.
				;
				; preconditions: decimal ASCII value to validate is a parameter
				;
				; postconditions: uses registers eax, ebx
				;
				; receives:
				;			[ebp+8]		ascii_val = value to validate
				;
				; returns: updates ZF accordingly (0 = valid, 1 = invalid)
				;---------------------------------------
					; set up the stack frame
 000001E4  55				push	ebp
 000001E5  8B EC			mov		ebp, esp

					; if 48 <= ascii_val <= 57, valid
 000001E7  8B 45 08			mov		eax, [ebp+8]
 000001EA  BB 00000030			mov		ebx, 48
 000001EF  3B C3			cmp		eax, ebx
 000001F1  7C 0E			jl		InvalidASCII
 000001F3  BB 00000039			mov		ebx, 57
 000001F8  3B C3			cmp		eax, ebx
 000001FA  7F 05			jg		InvalidASCII
 000001FC  83 C8 01			or		eax, 1					; valid, clear flag
 000001FF  EB 05			jmp		Done

 00000201			InvalidASCII:
 00000201  A9 00000000			test	eax, 0					; invalid, set flag

 00000206			Done:
					; clear the stack frame
 00000206  5D				pop		ebp
 00000207  C2 0004			ret		4
					
 0000020A			validateASCII ENDP
				;---------------------------------------
 0000020A			validateInt proc
				;
				; takes signed integer value and determines whether value is valid, meaning
				;	MINVAL <= int_val <= MAXVAL. Sets ZF if invalid, clears ZF if valid.
				;
				; preconditions: sign of value, value to test, MINVAL, MAXVAL are passed as
				;	arguments.
				;
				; postconditions: uses registers eax, ebx, edx, esi
				;
				; receives:
				;			[ebp+20]	@user_val_sign = OFFSET sign (1/-1) of user_val
				;			[ebp+16]	@int_to_validate = OFFSET of value to validate
				;			[ebp+12]	MINVAL = minimum acceptable input value
				;			[ebp+8]		MAXVAL = maximum acceptable input value
				;
				; returns: updates ZF accordingly (0 = valid, 1 = invalid)
				;---------------------------------------
					; set up the stack frame
 0000020A  55				push	ebp
 0000020B  8B EC			mov		ebp, esp

					; get value to validate
 0000020D  56				push	esi
 0000020E  8B 75 10			mov		esi, [ebp+16]				; bring in user_val
 00000211  8B 06			mov		eax, [esi]

					; bring in user_val_sign
 00000213  56				push	esi
 00000214  8B 75 14			mov		esi, [ebp+20]
 00000217  8B 16			mov		edx, [esi]
 00000219  5E				pop		esi

					; determine whether user_val is negative or positive
 0000021A  BB FFFFFFFF			mov		ebx, -1
 0000021F  3B D3			cmp		edx, ebx
 00000221  74 02			je		Negative
 00000223  EB 09			jmp		Positive

 00000225			Negative:
 00000225  8B 5D 0C			mov		ebx, [ebp+12]
 00000228  3B C3			cmp		eax, ebx
 0000022A  77 10			ja		InvalidInt
 0000022C  EB 09			jmp		ValidInt

 0000022E			Positive:
 0000022E  8B 5D 08			mov		ebx, [ebp+8]
 00000231  3B C3			cmp		eax, ebx
 00000233  77 07			ja		InvalidInt
 00000235  EB 00			jmp		ValidInt

 00000237			ValidInt:
 00000237  83 C8 01			or		eax, 1				; valid int, clear ZF
 0000023A  EB 05			jmp		ValIntDone

 0000023C			InvalidInt:
 0000023C  A9 00000000			test	eax, 0				; invalid int, set ZF

 00000241			ValIntDone:
 00000241  5E				pop		esi
					; clear the stack frame
 00000242  5D				pop		ebp
 00000243  C2 0010			ret		16
					
 00000246			validateInt ENDP
				;---------------------------------------
 00000246			displayArray proc
				;
				; takes array of ARRAYSIZE nums and prints array to console via WriteVal.
				;	Converts each integer into a string before printing value via macro
				;	mdisplayString. Also prints header title and commas via mdisplayString.
				;
				; preconditions: array contains ARRAYSIZE printable integers, header string and
				;	commas available to print, arguments needed for WriteVal, string array to 
				;	contain output string, are all arguments
				;
				; postconditions: uses registers eax, ecx, edi, esi
				;
				; receives:
				;			[ebp+32]	@comma = for displaying comma separate items
				;			[ebp+28]	@current_array_num = contains single int of current int
				;			[ebp+24]	@array = array of integer to print
				;			[ebp+20]	ARRAYSIZE = size of array
				;			[ebp+16]	@array_str = header
				;			[ebp+12]	@user_output_str = contains string form of int
				;			[ebp+8]		max_len_output = size of @user_output_str
				;
				; returns: prints array section header, prints comma-separated items of array
				;---------------------------------------
					; set up the stack
 00000246  55				push	ebp
 00000247  8B EC			mov		ebp, esp

					; display the header
					mdisplayString [ebp+16]
 00000249  52		     1		push	edx
 0000024A  8B 55 10	     1		mov		edx, [ebp+16]
 0000024D  E8 00000000 E     1		call	WriteString
 00000252  5A		     1		pop		edx

					; prepare loop to go to thru array
 00000253  8B 4D 14			mov		ecx, [ebp+20]
 00000256  8B 75 18			mov		esi, [ebp+24]

 00000259			ReadArray:
					; get the array int to write
 00000259  8B 06			mov		eax, [esi]
 0000025B  57				push	edi
 0000025C  8B 7D 1C			mov		edi, [ebp+28]
 0000025F  89 07			mov		[edi], eax
 00000261  5F				pop		edi

					; prepare args for WriteVal
 00000262  FF 75 1C			push	[ebp+28]
 00000265  FF 75 0C			push	[ebp+12]
 00000268  FF 75 08			push	[ebp+8]
 0000026B  E8 00000018			call	WriteVal

					; no comma after last item
 00000270  83 F9 01			cmp		ecx, 1
 00000273  74 0A			je		NextItem
					mdisplayString [ebp+32]
 00000275  52		     1		push	edx
 00000276  8B 55 20	     1		mov		edx, [ebp+32]
 00000279  E8 00000000 E     1		call	WriteString
 0000027E  5A		     1		pop		edx

 0000027F			NextItem:
					; point to next array item
 0000027F  83 C6 04			add		esi, 4
 00000282  E2 D5			loop	ReadArray
						
					; clear the stack
 00000284  5D				pop		ebp
 00000285  C2 001C			ret		28
 00000288			displayArray ENDP
				;---------------------------------------
 00000288			WriteVal proc
				;
				; Converts int_to_display to string of it's respective ASCII values which is 
				;	stored in output_str. prints string form of integer in output_str via 
				;	mdisplayString.
				;
				; preconditions: int_to_display is signed integer, and output_str is a
				;	string array of appropriate length passed as arguments.
				;		
				; postconditions: uses registers eax, ebx, ecx, edx, edi, esi
				;
				; receives: 
				;			[ebp+16]	@int_to_display = signed int to be converted/printed
				;			[ebp+12]	@output_str = string array conaining converted int string
				;			[ebp+8]		@len_output_str = length of output_str
				;			[ebp-4]		local counter = contains length of int_to_display
				;
				; returns: output_str printed and contains string representation of integer
				;---------------------------------------
					; set up stack frame
 00000288  55				push	ebp
 00000289  8B EC			mov		ebp, esp
 0000028B  83 EC 04			sub		esp, 4

					; store procedures from calling proc
 0000028E  51				push	ecx
 0000028F  56				push	esi
 00000290  50				push	eax
 00000291  57				push	edi

					; prepare items for conversion
 00000292  8B 7D 0C			mov		edi, [ebp+12]
 00000295  8B 75 10			mov		esi, [ebp+16]
 00000298  8B 06			mov		eax, [esi]
 0000029A  C7 45 FC			mov		DWORD PTR [ebp-4], 0
	   00000000
 000002A1  8B 4D 08			mov		ecx, [ebp+8]
 000002A4  50				push	eax

 000002A5			ClearArray:
 000002A5  B8 00000000			mov		eax, 0
 000002AA  FC				cld
 000002AB  AA				stosb							; zeroes out string array
 000002AC  E2 F7			loop	ClearArray

					; re-prepare items for conversion
 000002AE  58				pop		eax
 000002AF  8B 7D 0C			mov		edi, [ebp+12]

					; check sign of the num, need a leading "-"
 000002B2  8B 06			mov		eax, [esi]
 000002B4  83 F8 00			cmp		eax, 0
 000002B7  7D 10			jge		Convert					; num is positive

 000002B9			NegativeNum:
 000002B9  50				push	eax
 000002BA  B8 0000002D			mov		eax, 45					; ASCII 45 = "-"
 000002BF  FC				cld
 000002C0  AA				stosb
 000002C1  58				pop		eax

					; make num positive, convert digits only
 000002C2  BB FFFFFFFF			mov		ebx, -1
 000002C7  F7 EB			imul	ebx

 000002C9			Convert:
 000002C9  33 D2			xor		edx, edx
 000002CB  BB 0000000A			mov		ebx, 10
 000002D0  F7 F3			div		ebx						; remainder in edx = value to convert

 000002D2			Ascii:
 000002D2  83 C2 30			add		edx, 48
 000002D5  52				push	edx
 000002D6  8B 4D FC			mov		ecx, DWORD PTR [ebp-4]
 000002D9  41				inc		ecx
 000002DA  89 4D FC			mov		DWORD PTR [ebp-4], ecx
 000002DD  83 F8 00			cmp		eax, 0
 000002E0  74 02			je		PrepareOutput			; when repeated divisions = 0, print num
 000002E2  EB E5			jmp		Convert					; still digits left to convert

 000002E4			PrepareOutput:
 000002E4  8B 4D FC			mov		ecx, DWORD PTR [ebp-4]

 000002E7			Output:
 000002E7  58				pop		eax
 000002E8  FC				cld
 000002E9  AA				stosb
 000002EA  E2 FB			loop	Output

					; num is ready to print
					mDisplayString [ebp+12]
 000002EC  52		     1		push	edx
 000002ED  8B 55 0C	     1		mov		edx, [ebp+12]
 000002F0  E8 00000000 E     1		call	WriteString
 000002F5  5A		     1		pop		edx

					; restore calling procedure registers
 000002F6  5F				pop		edi
 000002F7  58				pop		eax
 000002F8  5E				pop		esi
 000002F9  59				pop		ecx
					
					; clear the stack
 000002FA  8B E5			mov		esp, ebp				; local var counter
 000002FC  5D				pop		ebp
 000002FD  C2 000C			ret		12
 00000300			WriteVal ENDP
				;---------------------------------------
 00000300			displayStats proc
				;
				; iterates over array of signed integers, calculating total sum and average
				;	(average rounded down) of the array. headers are printed via mdisplayString
				;	and resulting values are printed via WriteVal.
				;
				; preconditions: array of ARRAYSIZE signed integers, variables for sum and 
				;	average, appropriate header strings, are passed as arguments. arguments for
				;	WriteVal also passed as arguments.
				;
				; postconditions: uses registers eax, ebx, ecx, edx, edi, esi
				;
				; receives:
				;			[ebp+36]	@user_output_str = string array for value to be printed
				;			[ebp+32]	max_len_output = length of @user_output_str
				;			[ebp+28]	@sum = variable containing sum of array
				;			[ebp+24]	@average = variable containing average of array
				;			[ebp+20]	@array = array from which sum and average are calculated
				;			[ebp+16]	ARRAYSIZE = size of @array
				;			[ebp+12]	@sum_str = header for sum
				;			[ebp+8]		@average_str = header for average
				;
				; returns: headers for sum and average are printed. sum and average values
				;	of array are calculated and appropriate variables updated. sum and average
				;	values are printed.
				;---------------------------------------
					; prepare the stack
 00000300  55				push	ebp
 00000301  8B EC			mov		ebp, esp

					; display sum header
					mdisplayString [ebp+12]
 00000303  52		     1		push	edx
 00000304  8B 55 0C	     1		mov		edx, [ebp+12]
 00000307  E8 00000000 E     1		call	WriteString
 0000030C  5A		     1		pop		edx

					; prepare values for summation
 0000030D  8B 75 14			mov		esi, [ebp+20]				; array
 00000310  8B 7D 1C			mov		edi, [ebp+28]				; start with sum, will also use avg
 00000313  B8 00000000			mov		eax, 0
 00000318  8B 5D 10			mov		ebx, [ebp+16]
 0000031B  8B 4D 10			mov		ecx, [ebp+16]

 0000031E			Calculate:
 0000031E  8B 07			mov		eax, [edi]
 00000320  03 06			add		eax, [esi]
 00000322  89 07			mov		[edi], eax					; update sum
 00000324  83 C6 04			add		esi, 4
 00000327  99				cdq
 00000328  F7 FB			idiv	ebx
 0000032A  57				push	edi
 0000032B  8B 7D 18			mov		edi, [ebp+24]
 0000032E  89 07			mov		[edi], eax					; update average
 00000330  5F				pop		edi
 00000331  E2 EB			loop	Calculate

					; display the sum
 00000333  FF 75 1C			push	[ebp+28]
 00000336  FF 75 24			push	[ebp+36]
 00000339  FF 75 20			push	[ebp+32]
 0000033C  E8 FFFFFF47			call	WriteVal

					; display average header
					mdisplayString [ebp+8]
 00000341  52		     1		push	edx
 00000342  8B 55 08	     1		mov		edx, [ebp+8]
 00000345  E8 00000000 E     1		call	WriteString
 0000034A  5A		     1		pop		edx

					; display the average
 0000034B  FF 75 18			push	[ebp+24]
 0000034E  FF 75 24			push	[ebp+36]
 00000351  FF 75 20			push	[ebp+32]
 00000354  E8 FFFFFF2F			call	WriteVal

					; clear the stack
 00000359  5D				pop		ebp
 0000035A  C2 0020			ret		32																   
 0000035D			displayStats ENDP
				;---------------------------------------
 0000035D			farewell proc
				;
				; displays goodbye message to user via macro mdisplayString.
				;
				; preconditions: goodbye string declared and passed as argument.
				;
				; postconditions: postconditions of mdisplayString apply.
				;
				; receives:
				;			[ebp+8] @goodbye_str
				;
				; returns: string is printed to user
				;---------------------------------------
					; set up the stack
 0000035D  55				push	ebp
 0000035E  8B EC			mov		ebp, esp

					; display the string
					mdisplayString [ebp+8]
 00000360  52		     1		push	edx
 00000361  8B 55 08	     1		mov		edx, [ebp+8]
 00000364  E8 00000000 E     1		call	WriteString
 00000369  5A		     1		pop		edx

					; clear the stack
 0000036A  5D				pop		ebp
 0000036B  C3				ret
 0000036C			farewell ENDP
				END main
Microsoft (R) Macro Assembler Version 14.26.28806.0	    06/17/20 16:23:58
9Programming Assignment #6   (RohitChaudhary_Project6.asm    Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000029B Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000036C Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 00000114 _TEXT	Length= 000000D0 Public STDCALL
  GetNumber  . . . . . . . . . .	L Near	 0000011A _TEXT	
  IterateInput . . . . . . . . .	L Near	 00000157 _TEXT	
  NegativeNum  . . . . . . . . .	L Near	 00000171 _TEXT	
  Check  . . . . . . . . . . . .	L Near	 00000180 _TEXT	
  Conversion . . . . . . . . . .	L Near	 0000018E _TEXT	
  NextNum  . . . . . . . . . . .	L Near	 000001AA _TEXT	
  UpdateVal  . . . . . . . . . .	L Near	 000001AC _TEXT	
  Error  . . . . . . . . . . . .	L Near	 000001CF _TEXT	
  DoneConverting . . . . . . . .	L Near	 000001DE _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 00000288 _TEXT	Length= 00000078 Public STDCALL
  ClearArray . . . . . . . . . .	L Near	 000002A5 _TEXT	
  NegativeNum  . . . . . . . . .	L Near	 000002B9 _TEXT	
  Convert  . . . . . . . . . . .	L Near	 000002C9 _TEXT	
  Ascii  . . . . . . . . . . . .	L Near	 000002D2 _TEXT	
  PrepareOutput  . . . . . . . .	L Near	 000002E4 _TEXT	
  Output . . . . . . . . . . . .	L Near	 000002E7 _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
displayArray . . . . . . . . . .	P Near	 00000246 _TEXT	Length= 00000042 Public STDCALL
  ReadArray  . . . . . . . . . .	L Near	 00000259 _TEXT	
  NextItem . . . . . . . . . . .	L Near	 0000027F _TEXT	
displayStats . . . . . . . . . .	P Near	 00000300 _TEXT	Length= 0000005D Public STDCALL
  Calculate  . . . . . . . . . .	L Near	 0000031E _TEXT	
farewell . . . . . . . . . . . .	P Near	 0000035D _TEXT	Length= 0000000F Public STDCALL
fillArray  . . . . . . . . . . .	P Near	 000000D5 _TEXT	Length= 0000003F Public STDCALL
  Fill . . . . . . . . . . . . .	L Near	 000000E1 _TEXT	
introduction . . . . . . . . . .	P Near	 000000B0 _TEXT	Length= 00000025 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000B0 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
validateASCII  . . . . . . . . .	P Near	 000001E4 _TEXT	Length= 00000026 Public STDCALL
  InvalidASCII . . . . . . . . .	L Near	 00000201 _TEXT	
  Done . . . . . . . . . . . . .	L Near	 00000206 _TEXT	
validateInt  . . . . . . . . . .	P Near	 0000020A _TEXT	Length= 0000003C Public STDCALL
  Negative . . . . . . . . . . .	L Near	 00000225 _TEXT	
  Positive . . . . . . . . . . .	L Near	 0000022E _TEXT	
  ValidInt . . . . . . . . . . .	L Near	 00000237 _TEXT	
  InvalidInt . . . . . . . . . .	L Near	 0000023C _TEXT	
  ValIntDone . . . . . . . . . .	L Near	 00000241 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ARRAYSIZE  . . . . . . . . . . .	Number	 0000000Ah   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAXVAL . . . . . . . . . . . . .	Number	 7FFFFFFFh   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MINVAL . . . . . . . . . . . . .	Number	 -80000000h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
actual_len_input . . . . . . . .	DWord	 00000184 _DATA	
array_nums . . . . . . . . . . .	DWord	 00000190 _DATA	
array_str  . . . . . . . . . . .	Byte	 00000213 _DATA	
author_str . . . . . . . . . . .	Byte	 00000040 _DATA	
average_str  . . . . . . . . . .	Byte	 0000025E _DATA	
average  . . . . . . . . . . . .	DWord	 0000027D _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
comma  . . . . . . . . . . . . .	Byte	 0000023B _DATA	
current_array_num  . . . . . . .	DWord	 0000020F _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
error_str  . . . . . . . . . . .	Byte	 000001B8 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodbye_str  . . . . . . . . . .	Byte	 00000281 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
intro_str  . . . . . . . . . . .	Byte	 00000060 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
max_len_input  . . . . . . . . .	DWord	 00000180 _DATA	
max_len_output . . . . . . . . .	DWord	 0000020B _DATA	
prompt_str . . . . . . . . . . .	Byte	 00000155 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sum_str  . . . . . . . . . . . .	Byte	 0000023E _DATA	
sum  . . . . . . . . . . . . . .	DWord	 00000279 _DATA	
title_str  . . . . . . . . . . .	Byte	 00000000 _DATA	
user_input_str . . . . . . . . .	Byte	 00000174 _DATA	
user_output_str  . . . . . . . .	Byte	 000001FF _DATA	
user_val_sign  . . . . . . . . .	DWord	 0000018C _DATA	
user_val . . . . . . . . . . . .	DWord	 00000188 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
