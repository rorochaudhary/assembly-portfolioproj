Microsoft (R) Macro Assembler Version 14.26.28806.0	    06/08/20 00:01:49
9Programming Assignment #6   (RohitChaudhary_Project6.asm    Page 1 - 1


				TITLE Programming Assignment #6   (RohitChaudhary_Project6.asm)

				; Author: Rohit Chaudhary
				; Last Modified: 6/6/2020
				; OSU email address: chaudroh@oregonstate.edu
				; Course number/section: CS 271/400
				; Project Number: 6               Due Date: 6/7/2020
				; Description: test program demonstrating functionality of ReadVal and WriteVal
				;	procedures by prompting user to input 10 integers that will be stored in 
				;	an array, and then calculates the sum and average of the inputted vals. 
				;	ReadVal procedure implements the macro getString (macro prompts and gets 
				;	keyboard string input) and converts the numeric string in to the
				;	corresponding integer value while validating for sign and size. WriteVal
				;	procedure implements the macro displayString (macro prints string stored
				;	at specific memory location) converts a numeric value into a string of
				;	digits are are printed.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 =-80000000			minVal = -2147483648			; min possible 32bit value
 = 7FFFFFFF			maxVal = 2147483647				; max possible 32bit value
 = 0000000A			ARRAYSIZE = 10					; size of array containing integers

				;---------------------------------------
				mDisplayString MACRO buffer:req
				;
				; displays contents of buffer to user by printing buffer to console.
				;
				; preconditions: OFFSET of buffer must be passed along with buffer when 
				;	declaring the argument
				;
				; receives:
				;		buffer = string to be printed, passed with preceding OFFSET
				;
				; returns: string is printed to window
				;---------------------------------------
					push	edx
					mov		edx, buffer
					call	WriteString
					pop		edx
				ENDM
				;---------------------------------------
				mGetString MACRO prompt:req, varName:req, varLen:req, input_len:req
				;
				; calls mDisplayString to display a prompt for user and subsequently read user
				;	input with ReadString. user input stored in argument varName by ReadString 
				;	and argument varLen placed in edx as used by ReadString. length of users
				;	input from ReadString (EAX) stored in input_len
				;
				; preconditions: prompt with OFFSET passed as argument, parameter varName is an 
				;	array of characters, varLen is length of varLen
				;
				; postconditions: varName and input_len updated
				;
				; receives:
				;		prompt = address of user prompt to be printed, passed with preceding OFFSET
				;		varName = address ReadString user input array, passed with OFFSET
				;		varLen = length of varLen as used by ReadString
				;		input_len = length (bytes) if user input after ReadString, from EAX, passed with OFFSET
				;
				; returns: array varLen updated with user input, eax contains length
				;	of inputted string
				;---------------------------------------
					push	ecx
					push	edx
					push	edi
					
					; display a prompt for input
					mDisplayString prompt

					; read using ReadString
					mov		edi, input_len
					mov		edx, varName
					mov		ecx, varLen - 1
					call	ReadString
					mov		[edi], eax

					pop		edi
					pop		edx
					pop		ecx

				ENDM

 00000000			.data
 00000000 50 52 4F 47 52	title_str			BYTE		"PROGRAMMING ASSIGNMENT #6: Designing Low-Level "
	   41 4D 4D 49 4E
	   47 20 41 53 53
	   49 47 4E 4D 45
	   4E 54 20 23 36
	   3A 20 44 65 73
	   69 67 6E 69 6E
	   67 20 4C 6F 77
	   2D 4C 65 76 65
	   6C 20
 0000002F  49 2F 4F 20 70						BYTE		"I/O procedures",10,13,0
	   72 6F 63 65 64
	   75 72 65 73 0A
	   0D 00
 00000040 57 72 69 74 74	author_str			BYTE		"Written By: Rohit Chaudhary",10,13,10,13,0
	   65 6E 20 42 79
	   3A 20 52 6F 68
	   69 74 20 43 68
	   61 75 64 68 61
	   72 79 0A 0D 0A
	   0D 00
 00000060 50 6C 65 61 73	intro_str			BYTE		"Please provide 10 signed decmial integers.",10,13
	   65 20 70 72 6F
	   76 69 64 65 20
	   31 30 20 73 69
	   67 6E 65 64 20
	   64 65 63 6D 69
	   61 6C 20 69 6E
	   74 65 67 65 72
	   73 2E 0A 0D
 0000008C  45 61 63 68 20						BYTE		"Each number needs to be small enough to "
	   6E 75 6D 62 65
	   72 20 6E 65 65
	   64 73 20 74 6F
	   20 62 65 20 73
	   6D 61 6C 6C 20
	   65 6E 6F 75 67
	   68 20 74 6F 20
 000000B4  66 69 74 20 69						BYTE		"fit inside a 32-bit register.",10,13
	   6E 73 69 64 65
	   20 61 20 33 32
	   2D 62 69 74 20
	   72 65 67 69 73
	   74 65 72 2E 0A
	   0D
 000000D3  41 66 74 65 72						BYTE		"After you have finished inputting the raw numbers "
	   20 79 6F 75 20
	   68 61 76 65 20
	   66 69 6E 69 73
	   68 65 64 20 69
	   6E 70 75 74 74
	   69 6E 67 20 74
	   68 65 20 72 61
	   77 20 6E 75 6D
	   62 65 72 73 20
 00000105  49 20 77 69 6C						BYTE		"I will display a list",10,13
	   6C 20 64 69 73
	   70 6C 61 79 20
	   61 20 6C 69 73
	   74 0A 0D
 0000011C  6F 66 20 74 68						BYTE		"of the integers, their sum"
	   65 20 69 6E 74
	   65 67 65 72 73
	   2C 20 74 68 65
	   69 72 20 73 75
	   6D
 00000136  2C 20 61 6E 64						BYTE		", and their average value.",10,13,10,13,0
	   20 74 68 65 69
	   72 20 61 76 65
	   72 61 67 65 20
	   76 61 6C 75 65
	   2E 0A 0D 0A 0D
	   00
 00000155 50 6C 65 61 73	prompt_str			BYTE		"Please enter a signed number: ",0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 6E 75 6D
	   62 65 72 3A 20
	   00
 00000174  0000000C [		user_input_str		BYTE		12 DUP (0)
	    00
	   ]
 00000180 0000000C		max_len_input		DWORD		SIZEOF user_input_str
 00000184 00000000		actual_len_input	DWORD		?
 00000188 00000000		user_val			SDWORD		?
 0000018C 00000000		user_val_sign		SDWORD		?
 00000190  0000000A [		array_nums			SDWORD		ARRAYSIZE DUP (0)
	    00000000
	   ]
 000001B8 45 52 52 4F 52	error_str			BYTE		"ERROR: You did not enter a signed number or your "
	   3A 20 59 6F 75
	   20 64 69 64 20
	   6E 6F 74 20 65
	   6E 74 65 72 20
	   61 20 73 69 67
	   6E 65 64 20 6E
	   75 6D 62 65 72
	   20 6F 72 20 79
	   6F 75 72 20
 000001E9  6E 75 6D 62 65						BYTE		"number was too big.",10,13,0
	   72 20 77 61 73
	   20 74 6F 6F 20
	   62 69 67 2E 0A
	   0D 00
 000001FF  0000000C [		user_output_str		BYTE		12 DUP (0)
	    00
	   ]
 0000020B 0000000C		max_len_output		DWORD		SIZEOF user_output_str
 0000020F 00000000		current_array_num	SDWORD		?
 00000213 0A 0D 59 6F 75	array_str			BYTE		10,13,"You entered the following numbers: ",10,13,0
	   20 65 6E 74 65
	   72 65 64 20 74
	   68 65 20 66 6F
	   6C 6C 6F 77 69
	   6E 67 20 6E 75
	   6D 62 65 72 73
	   3A 20 0A 0D 00
 0000023B 2C 20 00		comma				BYTE		", ",0
 0000023E 0A 0D 54 68 65	sum_str				BYTE		10,13,"The sum of these numbers is: ",0
	   20 73 75 6D 20
	   6F 66 20 74 68
	   65 73 65 20 6E
	   75 6D 62 65 72
	   73 20 69 73 3A
	   20 00
 0000025E 0A 0D 54 68 65	average_str			BYTE		10,13,"The rounded average is: ",0
	   20 72 6F 75 6E
	   64 65 64 20 61
	   76 65 72 61 67
	   65 20 69 73 3A
	   20 00
 00000279 00000000sum					SDWORD		?
 0000027D 00000000		average				SDWORD		?
 00000281 54 68 61 6E 6B	goodbye_str			BYTE		"Thanks for playing!",0
	   73 20 66 6F 72
	   20 70 6C 61 79
	   69 6E 67 21 00


 00000000			.code
 00000000			main PROC
				; introduction procedure displays title, author, and user instructions (macro)
 00000000  68 00000000 R		push	OFFSET title_str
 00000005  68 00000040 R		push	OFFSET author_str
 0000000A  68 00000060 R		push	OFFSET intro_str
 0000000F  E8 00000092			call	introduction
					
				; get 10 integers from user and placed into array
 00000014  68 0000018C R		push	OFFSET user_val_sign
 00000019  68 00000184 R		push	OFFSET actual_len_input
 0000001E  68 00000190 R		push	OFFSET array_nums
 00000023  6A 0A			push	ARRAYSIZE
 00000025  68 000001B8 R		push	OFFSET error_str
 0000002A  68 00000155 R		push	OFFSET prompt_str
 0000002F  68 00000174 R		push	OFFSET user_input_str
 00000034  FF 35 00000180 R		push	max_len_input
 0000003A  68 00000188 R		push	OFFSET user_val
 0000003F  68 80000000			push	minVal
 00000044  68 7FFFFFFF			push	maxVal
 00000049  E8 0000007D			call	fillArray

				; displayArray will loop through array and print array
 0000004E  68 0000023B R		push	OFFSET comma
 00000053  68 0000020F R		push	OFFSET current_array_num
 00000058  68 00000190 R		push	OFFSET array_nums
 0000005D  6A 0A			push	ARRAYSIZE
 0000005F  68 00000213 R		push	OFFSET array_str
 00000064  68 000001FF R		push	OFFSET user_output_str
 00000069  FF 35 0000020B R		push	max_len_output
 0000006F  E8 000001C8			call	displayArray

				; display stats will display both the sum and average of the 10 nums
 00000074  68 000001FF R		push	OFFSET user_output_str
 00000079  FF 35 0000020B R		push	max_len_output
 0000007F  68 00000279 R		push	OFFSET sum
 00000084  68 0000027D R		push	OFFSET average
 00000089  68 00000190 R		push	OFFSET array_nums
 0000008E  6A 0A			push	ARRAYSIZE
 00000090  68 0000023E R		push	OFFSET sum_str
 00000095  68 0000025E R		push	OFFSET average_str
 0000009A  E8 00000257			call	displayStats

					exit	; exit to operating system
 0000009F  6A 00	   *	    push   +000000000h
 000000A1  E8 00000000 E   *	    call   ExitProcess
 000000A6			main ENDP

				;---------------------------------------
 000000A6			introduction proc
				;
				; displays program title, information, and user instructions by printing to
				;	console. utilizes mDisplayString macro to print.
				;
				; preconditions: strings containing title, author, and instructions are 
				;	prepared for display.
				; 
				; postconditions: relevant strings are printed to console
				;
				; receives: 
				;		[ebp+16] @title_str
				;		[ebp+12] @author_str
				;		[ebp+8] @intro_str
				;
				; returns: none
				;---------------------------------------
					; set up the stack frame
 000000A6  55				push	ebp
 000000A7  8B EC			mov		ebp, esp

					; print title, author, instructions
					mDisplayString	[ebp+16]
 000000A9  52		     1		push	edx
 000000AA  8B 55 10	     1		mov		edx, [ebp+16]
 000000AD  E8 00000000 E     1		call	WriteString
 000000B2  5A		     1		pop		edx
					mDisplayString	[ebp+12]
 000000B3  52		     1		push	edx
 000000B4  8B 55 0C	     1		mov		edx, [ebp+12]
 000000B7  E8 00000000 E     1		call	WriteString
 000000BC  5A		     1		pop		edx
					mDisplayString	[ebp+8]
 000000BD  52		     1		push	edx
 000000BE  8B 55 08	     1		mov		edx, [ebp+8]
 000000C1  E8 00000000 E     1		call	WriteString
 000000C6  5A		     1		pop		edx

					; clear the stack
 000000C7  5D				pop		ebp
 000000C8  C2 000C			ret		12
 000000CB			introduction ENDP
				;---------------------------------------
 000000CB			fillArray proc
				;
				; repeats ReadVal procedure ARRAYSIZE times, taking the resulting number from 
				;	ReadVal and adding it to an array
				;
				; preconditions: array of ARRAYSIZE is declared, preconditions for ReadVal are
				;	met. procedure requires parameters for both the array and for ReadVal, as
				;	ReadVal will use fillArray parameters to as its own arguments.
				; 
				; postconditions: array is filled, user_val is updated with last inputted num
				;
				; receives: 
				;		[ebp+48]	OFFSET user_val_sign = sign of user's input value
				;		[ebp+44]	OFFSET acutal_len_input = length of user's input in bytes
				;		[ebp+40]	OFFSET array_nums = array receiving nums
				;		[ebp+36]	ARRAYSIZE = size of array_nums
				;		[ebp+32]	@error_str	= error msg to display
				;		[ebp+28]	@prompt_str = string asking user to input a value
				;		[ebp+24]	@user_input_str = str to receive user input
				;		[ebp+20]	max_len_input = size of user_input_str
				;		[ebp+16]	@user_val = address of variable to be updated with converted num
				;		[ebp+12]	minVal = minimum acceptable input value
				;		[ebp+8]		maxVal = maximum acceptable input value
				;
				; returns: updated array
				;---------------------------------------
					; set up the stack frame
 000000CB  55				push	ebp
 000000CC  8B EC			mov		ebp, esp

					; prepare loop
 000000CE  8B 7D 28			mov		edi, [ebp+40]			; array_nums
 000000D1  8B 75 10			mov		esi, [ebp+16]			; current int to go into array
 000000D4  8B 4D 24			mov		ecx, [ebp+36]			; ARRAYSIZE

 000000D7			Fill:
					; save relevant values before ReadVal
 000000D7  51				push	ecx
 000000D8  57				push	edi
 000000D9  56				push	esi

					; items needed to call ReadVal
 000000DA  FF 75 30			push	[ebp+48]				; OFFSET user_val_sign
 000000DD  FF 75 2C			push	[ebp+44]				; OFFSET actual_len_input
 000000E0  FF 75 20			push	[ebp+32]				; OFFSET error_str
 000000E3  FF 75 1C			push	[ebp+28]				; OFFSET prompt_str
 000000E6  FF 75 18			push	[ebp+24]				; OFFSET user_input_str
 000000E9  FF 75 14			push	[ebp+20]				; max_len_input
 000000EC  FF 75 10			push	[ebp+16]				; OFFSET user_val
 000000EF  FF 75 0C			push	[ebp+12]				; minVal
 000000F2  FF 75 08			push	[ebp+8]					; maxVal
 000000F5  E8 00000010			call	ReadVal

					; restore values
 000000FA  5E				pop		esi
 000000FB  5F				pop		edi
 000000FC  59				pop		ecx

					; add the new integer to the array
 000000FD  8B 06			mov		eax, [esi]
 000000FF  89 07			mov		[edi], eax
 00000101  83 C7 04			add		edi, 4

					; next num
 00000104  E2 D1			loop	Fill

					; clear the stack
 00000106  5D				pop		ebp
 00000107  C2 002C			ret		44
 0000010A			fillArray ENDP
				;---------------------------------------
 0000010A			ReadVal proc
				;
				; gets string of digits from user (using mGetString macro) and converts the
				;	inputted string to a signed int value. validation performed to make sure
				;	minVal <= user_val <= maxVal. this implies that ReadVal can accept and 
				;	validate signed integers.
				;
				; preconditions: string is prepared to prompt user for input, variable declared
				;	for inputted variable to be stored.
				;
				; postconditions: prompt string is printed
				;
				; receives:
				;		[ebp+40] @user_val_sign = sign (1/-1) of user's input value
				;		[ebp+36] @actual_len_input = length (bytes) of user input string
				;		[ebp+32] @error_str	= error msg to display
				;		[ebp+28] @prompt_str = string asking user to input a value
				;		[ebp+24] @user_input_str = str to receive user input
				;		[ebp+20] max_len_input = size of user_input_str
				;		[ebp+16] @user_val = address of variable to be updated with converted num
				;		[ebp+12] minVal = minimum acceptable input value
				;		[ebp+8] maxVal = maximum acceptable input value
				;		[ebp-4] x = holds intermediate conversions
				;		[ebp-8] temp = holds local ascii_val
				;
				; returns: user_val updated with converted signed int
				;---------------------------------------

					; set up the stack frame
 0000010A  55				push	ebp
 0000010B  8B EC			mov		ebp, esp
 0000010D  83 EC 08			sub		esp, 8					; create local var

 00000110			GetNumber:
					; prompt the user
					mGetString	[ebp+28], [ebp+24], [ebp+20], [ebp+36]
 00000110  51		     1		push	ecx
 00000111  52		     1		push	edx
 00000112  57		     1		push	edi
 00000113  52		     2		push	edx
 00000114  8B 55 1C	     2		mov		edx, [ebp+28]
 00000117  E8 00000000 E     2		call	WriteString
 0000011C  5A		     2		pop		edx
 0000011D  8B 7D 24	     1		mov		edi, [ebp+36]
 00000120  8B 55 18	     1		mov		edx, [ebp+24]
 00000123  8B 4D 13	     1		mov		ecx, [ebp+20] - 1
 00000126  E8 00000000 E     1		call	ReadString
 0000012B  89 07	     1		mov		[edi], eax
 0000012D  5F		     1		pop		edi
 0000012E  5A		     1		pop		edx
 0000012F  59		     1		pop		ecx

					; time to convert input str -> int
 00000130  FC				cld
 00000131  8B 7D 24			mov		edi, [ebp+36]
 00000134  8B 0F			mov		ecx, [edi]				; loop counter = length of user input
 00000136  8B 75 18			mov		esi, [ebp+24]			; user input is going to be accessed
 00000139  C7 45 FC			mov		DWORD PTR [ebp-4], 0	; initialize x
	   00000000
 00000140  BA 00000001			mov		edx, 1			
					
					; update user_val_sign
 00000145  57				push	edi
 00000146  8B 7D 28			mov		edi, [ebp+40]
 00000149  89 17			mov		[edi], edx
 0000014B  5F				pop		edi
 0000014C  52				push	edx

 0000014D			IterateInput:
 0000014D  B8 00000000			mov		eax, 0					; clear reg for next num to process
 00000152  AC				lodsb							; load [user input] into eax

					; check to see if leading -/+ sign given
 00000153  BB 0000002D			mov		ebx, 45					; ASCII - = 45
 00000158  3B C3			cmp		eax, ebx
 0000015A  74 0B			je		NegativeNum
 0000015C  BB 0000002B			mov		ebx, 43					; ASCII + = 43
 00000161  3B C3			cmp		eax, ebx
 00000163  74 3B			je		NextNum
 00000165  EB 0F			jmp		Check					; no leading sign, move on

 00000167			NegativeNum:
 00000167  BA FFFFFFFF			mov		edx, -1
					; update user_val_sign
 0000016C  57				push	edi
 0000016D  8B 7D 28			mov		edi, [ebp+40]
 00000170  89 17			mov		[edi], edx
 00000172  5F				pop		edi
 00000173  52				push	edx
 00000174  EB 2A			jmp		NextNum

 00000176			Check:
					; validate that ascii between 48-57
 00000176  89 45 F8			mov		DWORD PTR [ebp-8], eax
 00000179  50				push	eax
 0000017A  E8 0000005B			call	validateASCII
 0000017F  74 44			jz		Error
 00000181  8B 45 F8			mov		eax, DWORD PTR [ebp-8]

 00000184			Conversion:
					; conversion: x = 10 * x + (user_input[i] - 48)
 00000184  BB 00000030			mov		ebx, 48
 00000189  2B C3			sub		eax, ebx
 0000018B  50				push	eax
 0000018C  8B 45 FC			mov		eax, DWORD PTR [ebp-4]
 0000018F  BB 0000000A			mov		ebx, 10
 00000194  F7 E3			mul		ebx
 00000196  89 45 FC			mov		DWORD PTR [ebp-4], eax
 00000199  58				pop		eax
 0000019A  03 45 FC			add		eax, DWORD PTR [ebp-4]
 0000019D  89 45 FC			mov		DWORD PTR [ebp-4], eax
 000001A0			NextNum:
 000001A0  E2 AB			loop	IterateInput

 000001A2			UpdateVal:
					; done, move converted result to user_val
 000001A2  8B 7D 10			mov		edi, [ebp+16]
 000001A5  89 07			mov		[edi], eax

					; validate the int to be within range
 000001A7  FF 75 28			push	[ebp+40]				;@user_val_sign
 000001AA  FF 75 10			push	[ebp+16]				;@user_val
 000001AD  FF 75 0C			push	[ebp+12]				;minVal
 000001B0  FF 75 08			push	[ebp+8]					;maxVal
 000001B3  E8 00000048			call	ValidateInt
 000001B8  74 0B			jz		Error

					; add the appropriate sign to user_val
					; if input was negative num, restore negative state
 000001BA  5A				pop		edx
 000001BB  8B 07			mov		eax, [edi]
 000001BD  8B DA			mov		ebx, edx
 000001BF  F7 EB			imul	ebx
 000001C1  89 07			mov		[edi], eax				; done, move converted result back to user_val

					; done with str -> int conversion, int also validated
 000001C3  EB 0F			jmp		DoneConverting

 000001C5			Error:
					mDisplayString [ebp+32]
 000001C5  52		     1		push	edx
 000001C6  8B 55 20	     1		mov		edx, [ebp+32]
 000001C9  E8 00000000 E     1		call	WriteString
 000001CE  5A		     1		pop		edx
 000001CF  E9 FFFFFF3C			jmp		GetNumber

 000001D4			DoneConverting:
					; clear the stack
 000001D4  8B E5			mov		esp, ebp
 000001D6  5D				pop		ebp
 000001D7  C2 0024			ret		36
 000001DA			ReadVal ENDP
				;---------------------------------------
 000001DA			validateASCII proc
				;
				; takes ascii value and determines whether value is a digit, meaning between
				;	ascii values 48 - 57. sets ZF if not a digit, clears ZF it is a digit
				;
				; preconditions: decimal ascii value to validate is passed as parameter
				;
				; postconditions: ZF is changed accordingly
				;
				; receives:
				;		[ebp+8] ascii_val = value to validate
				;
				; returns: updates ZF accordingly
				;---------------------------------------
					; set up the stack frame
 000001DA  55				push	ebp
 000001DB  8B EC			mov		ebp, esp

					; if 48 <= ascii_val <= 57, set flag
 000001DD  8B 45 08			mov		eax, [ebp+8]
 000001E0  BB 00000030			mov		ebx, 48
 000001E5  3B C3			cmp		eax, ebx
 000001E7  7C 0E			jl		InvalidASCII
 000001E9  BB 00000039			mov		ebx, 57
 000001EE  3B C3			cmp		eax, ebx
 000001F0  7F 05			jg		InvalidASCII
 000001F2  83 C8 01			or		eax, 1				; valid digit, clear ZF and finish
 000001F5  EB 05			jmp		Done

 000001F7			InvalidASCII:
 000001F7  A9 00000000			test	eax, 0

 000001FC			Done:
					; clear the stack frame
 000001FC  5D				pop		ebp
 000001FD  C2 0004			ret		4
					
 00000200			validateASCII ENDP
				;---------------------------------------
 00000200			validateInt proc
				;
				; takes integer value and determines whether value is between valid, meaning
				;	minVal <= int_val <= maxVal. Zero flag is set if value is not valid, cleared
				;	otherwise.
				;
				; preconditions: valid integer value to test, minVal < maxVal
				;
				; postconditions: ZF is changed accordingly
				;
				; receives:
				;		[ebp+20] @user_val_sign = OFFSET sign (1/-1) of user_val
				;		[ebp+16] @user_val = OFFSET of value to validate
				;		[ebp+12] minVal = minimum acceptable input value
				;		[ebp+8] maxVal = maximum acceptable input value
				;
				; returns: updates ZF accordingly
				;---------------------------------------
					; set up the stack frame
 00000200  55				push	ebp
 00000201  8B EC			mov		ebp, esp
					
					; bring in user_val_sign into edx (has to be done through stacks/args of fillArray, ReadVal, validateInt)
					; if user_val_sign = -1:
						; if (unsigned)user_val > (unsigned)minVal
							; invalid
					; elif:       --> user_val is positive
						;if (unsigned)user_val > (unsigned)maxVal
							; invalid
					; else:
						; valid

 00000203  56				push	esi
 00000204  8B 75 10			mov		esi, [ebp+16]				; bring in user_val
 00000207  8B 06			mov		eax, [esi]

					; bring in user_val_sign
 00000209  56				push	esi
 0000020A  8B 75 14			mov		esi, [ebp+20]
 0000020D  8B 16			mov		edx, [esi]
 0000020F  5E				pop		esi

					; determine whether user_val is negative or positive
 00000210  BB FFFFFFFF			mov		ebx, -1
 00000215  3B D3			cmp		edx, ebx
 00000217  74 02			je		Negative
 00000219  EB 09			jmp		Positive

 0000021B			Negative:
 0000021B  8B 5D 0C			mov		ebx, [ebp+12]
 0000021E  3B C3			cmp		eax, ebx
 00000220  77 10			ja		InvalidInt
 00000222  EB 09			jmp		ValidInt

 00000224			Positive:
 00000224  8B 5D 08			mov		ebx, [ebp+8]
 00000227  3B C3			cmp		eax, ebx
 00000229  77 07			ja		InvalidInt
 0000022B  EB 00			jmp		ValidInt

 0000022D			ValidInt:
 0000022D  83 C8 01			or		eax, 1
 00000230  EB 05			jmp		ValIntDone			; valid int, clear ZF and finish

 00000232			InvalidInt:
 00000232  A9 00000000			test	eax, 0

 00000237			ValIntDone:
 00000237  5E				pop		esi
					; clear the stack frame
 00000238  5D				pop		ebp
 00000239  C2 0010			ret		16
					
 0000023C			validateInt ENDP
				;---------------------------------------
 0000023C			displayArray proc
				;
				; takes array of ARRAYSIZE nums and prints array to console, using the WriteVal
				;	procedure to convert each integer into a printable string and display. 
				;	displayArray utilizes macro mdisplayString to print header title, and
				;	commas between items.
				;
				; preconditions: array_nums is ready to be printed, array_str contains a header
				;	title, arguments needed for WriteVal are prepared, all items are pushed onto
				;	stack
				;
				; postconditions: section title is printed, items of array_nums are printed with
				;	comma separations
				;
				; receives:
				;			[ebp+32]	@ comma
				;			[ebp+28]	@ current_array_num
				;			[ebp+24]	@ array_nums
				;			[ebp+20]	ARRAYSIZE
				;			[ebp+16]	@ array_str
				;			[ebp+12]	@ user_output_str
				;			[ebp+8]		max_len_output
				;
				; returns: none
				;---------------------------------------
					; set up the stack
 0000023C  55				push	ebp
 0000023D  8B EC			mov		ebp, esp

					; display the header
					mdisplayString [ebp+16]
 0000023F  52		     1		push	edx
 00000240  8B 55 10	     1		mov		edx, [ebp+16]
 00000243  E8 00000000 E     1		call	WriteString
 00000248  5A		     1		pop		edx

					; prepare loop to go to thru array
 00000249  8B 4D 14			mov		ecx, [ebp+20]
 0000024C  8B 75 18			mov		esi, [ebp+24]

 0000024F			ReadArray:
					; get the array item to write
 0000024F  8B 06			mov		eax, [esi]
 00000251  57				push	edi
 00000252  8B 7D 1C			mov		edi, [ebp+28]
 00000255  89 07			mov		[edi], eax
 00000257  5F				pop		edi

					; prepare args for WriteVal
 00000258  FF 75 1C			push	[ebp+28]
 0000025B  FF 75 0C			push	[ebp+12]
 0000025E  FF 75 08			push	[ebp+8]
 00000261  E8 00000018			call	WriteVal

					; no comma after last item
 00000266  83 F9 01			cmp		ecx, 1
 00000269  74 0A			je		NextItem
					mdisplayString [ebp+32]
 0000026B  52		     1		push	edx
 0000026C  8B 55 20	     1		mov		edx, [ebp+32]
 0000026F  E8 00000000 E     1		call	WriteString
 00000274  5A		     1		pop		edx

 00000275			NextItem:
					; point to next array item
 00000275  83 C6 04			add		esi, 4
 00000278  E2 D5			loop	ReadArray
						
					; clear the stack
 0000027A  5D				pop		ebp
 0000027B  C2 001C			ret		28
 0000027E			displayArray ENDP
				;---------------------------------------
 0000027E			WriteVal proc
				;
				; takes integer int_to_display, converts each digit in int_to_display to its
				;	respective ASCII value, and stores the ASCII value in output_str. calls
				;	mdisplayString to print the converted result to the console
				;
				; preconditions: int_to_display is an integer to be converted, output_str is a
				;	string array capable of storing converted ASCII values.
				;		
				; postconditions: mdisplayString prints output_str to console.
				;
				; receives: 
				;			[ebp+16] @int_to_display
				;			[ebp+12] @output_str
				;			[ebp+8] @len_output_str
				;			[ebp-4] local var counter = counts length of @int_to_display
				;
				; returns: none
				;---------------------------------------
					; set up stack frame
 0000027E  55				push	ebp
 0000027F  8B EC			mov		ebp, esp
 00000281  83 EC 04			sub		esp, 4

				; conversion pseudocode:
				; cld -> still moving from the beginning of the array
				; point to the beginning of the array, output_str
				; bring in int_to_display
					; @int_to_display / 10
					; remainder (edx) = lowest place value digit
					; take remainder and add 48 -> this is the ASCII value
					; push ASCII onto stack
					; increment counter
					; loop and do again
					; when eax = 0, no more divisons, int is done converting

				; new loop with ecx = counter
					; pop value off stack (1st pop is 1st digit/+/-)
					; add value to location of array pointer (starting at beginning)
					; loop with counter
					
					; when loop is done, call mdisplayString [output_str]

					; store procedures from calling proc
 00000284  51				push	ecx
 00000285  56				push	esi
 00000286  50				push	eax
 00000287  57				push	edi

					; prepare items for conversion
 00000288  8B 7D 0C			mov		edi, [ebp+12]
 0000028B  8B 75 10			mov		esi, [ebp+16]
 0000028E  8B 06			mov		eax, [esi]
 00000290  C7 45 FC			mov		DWORD PTR [ebp-4], 0
	   00000000
 00000297  8B 4D 08			mov		ecx, [ebp+8]
 0000029A  50				push	eax


 0000029B			CLearArray:
 0000029B  B8 00000000			mov		eax, 0
 000002A0  FC				cld
 000002A1  AA				stosb
 000002A2  E2 F7			loop	CLearArray

					; reprepare items for conversion
 000002A4  58				pop		eax
 000002A5  8B 7D 0C			mov		edi, [ebp+12]

					; check the sign of the num, if negative add negative sign to array first
 000002A8  8B 06			mov		eax, [esi]
 000002AA  83 F8 00			cmp		eax, 0
 000002AD  7D 10			jge		Convert
					; otherwise, num is negative

 000002AF			NegativeNum:
 000002AF  50				push	eax
 000002B0  B8 0000002D			mov		eax, 45				; ASCII 45 is "-"
 000002B5  FC				cld
 000002B6  AA				stosb
 000002B7  58				pop		eax

					; make num positive and convert
 000002B8  BB FFFFFFFF			mov		ebx, -1
 000002BD  F7 EB			imul	ebx

 000002BF			Convert:
					; if eax < 10, then no division, num directly converted
					;cmp		eax, 10
					;jb		Ascii
 000002BF  33 D2			xor		edx, edx
 000002C1  BB 0000000A			mov		ebx, 10
 000002C6  F7 F3			div		ebx					; remainder = value to convert
 000002C8			Ascii:
 000002C8  83 C2 30			add		edx, 48
 000002CB  52				push	edx
 000002CC  8B 4D FC			mov		ecx, DWORD PTR [ebp-4]
 000002CF  41				inc		ecx
 000002D0  89 4D FC			mov		DWORD PTR [ebp-4], ecx
 000002D3  83 F8 00			cmp		eax, 0
 000002D6  74 02			je		PrepareOutput
 000002D8  EB E5			jmp		Convert

 000002DA			PrepareOutput:
 000002DA  8B 4D FC			mov		ecx, DWORD PTR [ebp-4]
 000002DD			Output:
 000002DD  58				pop		eax
 000002DE  FC				cld
 000002DF  AA				stosb
 000002E0  E2 FB			loop	Output

					; done, now print the value
					mDisplayString [ebp+12]
 000002E2  52		     1		push	edx
 000002E3  8B 55 0C	     1		mov		edx, [ebp+12]
 000002E6  E8 00000000 E     1		call	WriteString
 000002EB  5A		     1		pop		edx

					; restore calling procedure registers
 000002EC  5F				pop		edi
 000002ED  58				pop		eax
 000002EE  5E				pop		esi
 000002EF  59				pop		ecx
					
					; clear the stack
 000002F0  8B E5			mov		esp, ebp			; get rid of local var
 000002F2  5D				pop		ebp
 000002F3  C2 000C			ret		12
 000002F6			WriteVal ENDP
				;---------------------------------------
 000002F6			displayStats proc
				;
				; iterates over array of nums and calculates the sum and the average (rounding 
				;	down) of the array. displayStats will the print the two values to the user
				;	using WriteVal while also displaying headers with macro mdisplayString
				;
				; preconditions: variables to contain sum and average, array of values, size of 
				;	array passed, string headers for the sum and average are all passed as 
				;	arguments on stack
				;
				; postconditions: appropriate values and headers are displayed
				;
				; receives:
				;			[ebp+36]	OFFSET user_output_str
				;			[ebp+32]	max_len_output
				;			[ebp+28]	OFFSET sum
				;			[ebp+24]	OFFSET average
				;			[ebp+20]	OFFSET array_nums
				;			[ebp+16]	ARRAYSIZE
				;			[ebp+12]	OFFSET sum_str
				;			[ebp+8]		OFFSET average_str
				;
				; returns: none
				;---------------------------------------
					; prepare the stack
 000002F6  55				push	ebp
 000002F7  8B EC			mov		ebp, esp

					; display sum header
					mdisplayString [ebp+12]
 000002F9  52		     1		push	edx
 000002FA  8B 55 0C	     1		mov		edx, [ebp+12]
 000002FD  E8 00000000 E     1		call	WriteString
 00000302  5A		     1		pop		edx

					; prepare values for summation
 00000303  8B 75 14			mov		esi, [ebp+20]				; array
 00000306  8B 7D 1C			mov		edi, [ebp+28]				; start with sum, will also use avg
 00000309  B8 00000000			mov		eax, 0
 0000030E  8B 5D 10			mov		ebx, [ebp+16]
 00000311  8B 4D 10			mov		ecx, [ebp+16]

 00000314			Calculate:
 00000314  8B 07			mov		eax, [edi]
 00000316  03 06			add		eax, [esi]
 00000318  89 07			mov		[edi], eax					; update sum
 0000031A  83 C6 04			add		esi, 4
 0000031D  99				cdq
 0000031E  F7 FB			idiv	ebx
 00000320  57				push	edi
 00000321  8B 7D 18			mov		edi, [ebp+24]
 00000324  89 07			mov		[edi], eax					; update average
 00000326  5F				pop		edi
 00000327  E2 EB			loop	Calculate

					; display the sum
 00000329  FF 75 1C			push	[ebp+28]
 0000032C  FF 75 24			push	[ebp+36]
 0000032F  FF 75 20			push	[ebp+32]
 00000332  E8 FFFFFF47			call	WriteVal

					; display average header
					mdisplayString [ebp+8]
 00000337  52		     1		push	edx
 00000338  8B 55 08	     1		mov		edx, [ebp+8]
 0000033B  E8 00000000 E     1		call	WriteString
 00000340  5A		     1		pop		edx

					; display the average
 00000341  FF 75 18			push	[ebp+24]
 00000344  FF 75 24			push	[ebp+36]
 00000347  FF 75 20			push	[ebp+32]
 0000034A  E8 FFFFFF2F			call	WriteVal

					; clear the stack
 0000034F  5D				pop		ebp
 00000350  C2 0020			ret		32
 00000353			displayStats ENDP

				END main
Microsoft (R) Macro Assembler Version 14.26.28806.0	    06/08/20 00:01:49
9Programming Assignment #6   (RohitChaudhary_Project6.asm    Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000295 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000353 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 0000010A _TEXT	Length= 000000D0 Public STDCALL
  GetNumber  . . . . . . . . . .	L Near	 00000110 _TEXT	
  IterateInput . . . . . . . . .	L Near	 0000014D _TEXT	
  NegativeNum  . . . . . . . . .	L Near	 00000167 _TEXT	
  Check  . . . . . . . . . . . .	L Near	 00000176 _TEXT	
  Conversion . . . . . . . . . .	L Near	 00000184 _TEXT	
  NextNum  . . . . . . . . . . .	L Near	 000001A0 _TEXT	
  UpdateVal  . . . . . . . . . .	L Near	 000001A2 _TEXT	
  Error  . . . . . . . . . . . .	L Near	 000001C5 _TEXT	
  DoneConverting . . . . . . . .	L Near	 000001D4 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 0000027E _TEXT	Length= 00000078 Public STDCALL
  CLearArray . . . . . . . . . .	L Near	 0000029B _TEXT	
  NegativeNum  . . . . . . . . .	L Near	 000002AF _TEXT	
  Convert  . . . . . . . . . . .	L Near	 000002BF _TEXT	
  Ascii  . . . . . . . . . . . .	L Near	 000002C8 _TEXT	
  PrepareOutput  . . . . . . . .	L Near	 000002DA _TEXT	
  Output . . . . . . . . . . . .	L Near	 000002DD _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
displayArray . . . . . . . . . .	P Near	 0000023C _TEXT	Length= 00000042 Public STDCALL
  ReadArray  . . . . . . . . . .	L Near	 0000024F _TEXT	
  NextItem . . . . . . . . . . .	L Near	 00000275 _TEXT	
displayStats . . . . . . . . . .	P Near	 000002F6 _TEXT	Length= 0000005D Public STDCALL
  Calculate  . . . . . . . . . .	L Near	 00000314 _TEXT	
fillArray  . . . . . . . . . . .	P Near	 000000CB _TEXT	Length= 0000003F Public STDCALL
  Fill . . . . . . . . . . . . .	L Near	 000000D7 _TEXT	
introduction . . . . . . . . . .	P Near	 000000A6 _TEXT	Length= 00000025 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000A6 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
validateASCII  . . . . . . . . .	P Near	 000001DA _TEXT	Length= 00000026 Public STDCALL
  InvalidASCII . . . . . . . . .	L Near	 000001F7 _TEXT	
  Done . . . . . . . . . . . . .	L Near	 000001FC _TEXT	
validateInt  . . . . . . . . . .	P Near	 00000200 _TEXT	Length= 0000003C Public STDCALL
  Negative . . . . . . . . . . .	L Near	 0000021B _TEXT	
  Positive . . . . . . . . . . .	L Near	 00000224 _TEXT	
  ValidInt . . . . . . . . . . .	L Near	 0000022D _TEXT	
  InvalidInt . . . . . . . . . .	L Near	 00000232 _TEXT	
  ValIntDone . . . . . . . . . .	L Near	 00000237 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ARRAYSIZE  . . . . . . . . . . .	Number	 0000000Ah   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
actual_len_input . . . . . . . .	DWord	 00000184 _DATA	
array_nums . . . . . . . . . . .	DWord	 00000190 _DATA	
array_str  . . . . . . . . . . .	Byte	 00000213 _DATA	
author_str . . . . . . . . . . .	Byte	 00000040 _DATA	
average_str  . . . . . . . . . .	Byte	 0000025E _DATA	
average  . . . . . . . . . . . .	DWord	 0000027D _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
comma  . . . . . . . . . . . . .	Byte	 0000023B _DATA	
current_array_num  . . . . . . .	DWord	 0000020F _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
error_str  . . . . . . . . . . .	Byte	 000001B8 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodbye_str  . . . . . . . . . .	Byte	 00000281 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
intro_str  . . . . . . . . . . .	Byte	 00000060 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
maxVal . . . . . . . . . . . . .	Number	 7FFFFFFFh   
max_len_input  . . . . . . . . .	DWord	 00000180 _DATA	
max_len_output . . . . . . . . .	DWord	 0000020B _DATA	
minVal . . . . . . . . . . . . .	Number	 -80000000h   
prompt_str . . . . . . . . . . .	Byte	 00000155 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sum_str  . . . . . . . . . . . .	Byte	 0000023E _DATA	
sum  . . . . . . . . . . . . . .	DWord	 00000279 _DATA	
title_str  . . . . . . . . . . .	Byte	 00000000 _DATA	
user_input_str . . . . . . . . .	Byte	 00000174 _DATA	
user_output_str  . . . . . . . .	Byte	 000001FF _DATA	
user_val_sign  . . . . . . . . .	DWord	 0000018C _DATA	
user_val . . . . . . . . . . . .	DWord	 00000188 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
